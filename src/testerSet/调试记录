DynamicGroomingTester
    直接从DynamicTester copy过来，
    改变节点对从IPlayer上来，没问题
   **************************
 erlang load =1.0
***************************
第2000个，	已经阻塞的个数为：  0
第4000个，	已经阻塞的个数为：  0
第6000个，	已经阻塞的个数为：  0
第8000个，	已经阻塞的个数为：  0
第10000个，	已经阻塞的个数为：  0
阻塞请求总数为：0没阻塞的：10000
阻塞率为：0.0%
**************************
 erlang load =10.0
***************************
第2000个，	已经阻塞的个数为：  67
第4000个，	已经阻塞的个数为：  85
第6000个，	已经阻塞的个数为：  121
第8000个，	已经阻塞的个数为：  156
第10000个，	已经阻塞的个数为：  161
阻塞请求总数为：161没阻塞的：9839
阻塞率为：2.514510747967663%
**************************
 erlang load =15.0
***************************
第2000个，	已经阻塞的个数为：  68
第4000个，	已经阻塞的个数为：  81
第6000个，	已经阻塞的个数为：  470
第8000个，	已经阻塞的个数为：  613
第10000个，	已经阻塞的个数为：  648
阻塞请求总数为：648没阻塞的：9352
阻塞率为：8.988363489278475%
   
   
5/6/15  将request里面的释放资源方法的optical 判断的选项加进去，还没问题       


5/6/15  将request里面的释放资源方法的optical 判断后的虚拟链路删除，还没问题

5/6/15  将上述方法的IP判断加进去哈没变，没问题


5/6/15  将dynamicGrooming 方法内部的constraint0添加部分加进去，还没问题，但是速度放慢了

5/6/15  将dynamicGrooming 方法内部的ip层路由部分加进去，还没问题


5/6/15  将dynamicGrooming 方法内部如果IP 层路由成功加进去，而内部不做任何变化，阻塞率发生变化：


**************************
 erlang load =1.0
***************************
第2000个，	已经阻塞的个数为：  3
第4000个，	已经阻塞的个数为：  6
第6000个，	已经阻塞的个数为：  9
第8000个，	已经阻塞的个数为：  12
第10000个，	已经阻塞的个数为：  16
阻塞请求总数为：16没阻塞的：9984
阻塞率为：0.01380926660552067%
**************************
 erlang load =10.0
***************************
第2000个，	已经阻塞的个数为：  14
第4000个，	已经阻塞的个数为：  20
第6000个，	已经阻塞的个数为：  40
第8000个，	已经阻塞的个数为：  159
第10000个，	已经阻塞的个数为：  294
阻塞请求总数为：294没阻塞的：9706
阻塞率为：3.4645589090091753%
**************************
 erlang load =15.0
***************************
第2000个，	已经阻塞的个数为：  70
第4000个，	已经阻塞的个数为：  96
第6000个，	已经阻塞的个数为：  99
第8000个，	已经阻塞的个数为：  170
第10000个，	已经阻塞的个数为：  446
阻塞请求总数为：446没阻塞的：9554
阻塞率为：5.785593017408001%




5/6/15 将ip层的路由添加到request里，并将layer设置为IP发生变化：

**************************
 erlang load =1.0
***************************
第2000个，	已经阻塞的个数为：  0
第4000个，	已经阻塞的个数为：  0
第6000个，	已经阻塞的个数为：  0
第8000个，	已经阻塞的个数为：  0
第10000个，	已经阻塞的个数为：  0
阻塞请求总数为：0	没阻塞的：10000
阻塞率为：0.0%
**************************
 erlang load =10.0
***************************
第2000个，	已经阻塞的个数为：  11
第4000个，	已经阻塞的个数为：  14
第6000个，	已经阻塞的个数为：  31
第8000个，	已经阻塞的个数为：  146
第10000个，	已经阻塞的个数为：  277
阻塞请求总数为：277	没阻塞的：9723
阻塞率为：3.449966137915398%
**************************
 erlang load =15.0
***************************
第2000个，	已经阻塞的个数为：  68
第4000个，	已经阻塞的个数为：  91
第6000个，	已经阻塞的个数为：  91
第8000个，	已经阻塞的个数为：  158
第10000个，	已经阻塞的个数为：  429
阻塞请求总数为：429	没阻塞的：9571
阻塞率为：5.771294060497319%


5/6/15.5 将下列这段加进去的时候，居然没变化

for(Link link:newRoute0.getLinklist()){
				request.getWorkVtLinkList().add(link.getTempVirtualLink());			
				for(VirtualLink vLink:link.getVirtualLinkList()){
					if(vLink.equals(link.getTempVirtualLink())){
						vLink.setRemanCapacity(vLink.getRemanCapacity()-request.getRequestRate());
						break;}}}
					
											
			
			
			
5/6/16.5  将请求数目修改为3万的时候结果如下：


**************************
 erlang load =1.0
***************************
第10000个，	已经阻塞的个数为：  0
第20000个，	已经阻塞的个数为：  0
第30000个，	已经阻塞的个数为：  0
IP层路由成功的请求总数为：43
阻塞请求总数为：0	没阻塞的：30000
阻塞率为：0.0%
**************************
 erlang load =10.0
***************************
第10000个，	已经阻塞的个数为：  277
第20000个，	已经阻塞的个数为：  414
第30000个，	已经阻塞的个数为：  516
IP层路由成功的请求总数为：90
阻塞请求总数为：516	没阻塞的：29484
阻塞率为：2.3944832199893633%
**************************
 erlang load =15.0
***************************
v第10000个，	已经阻塞的个数为：  429
第20000个，	已经阻塞的个数为：  1198
第30000个，	已经阻塞的个数为：  1749
IP层路由成功的请求总数为：136
阻塞请求总数为：1749	没阻塞的：28251
阻塞率为：8.029946170494428%



5/8/10  将DynamciGrooming类中的链路虚拟容量排序变成虚拟容量查找后，速度变快，数目为3万，结果如下：

**************************
 erlang load =1.0
***************************
第10000个，	已经阻塞的个数为：  0
第20000个，	已经阻塞的个数为：  0
第30000个，	已经阻塞的个数为：  0
IP层路由成功的请求总数为：969
阻塞请求总数为：0	没阻塞的：30000
阻塞率为：0.0%
**************************
 erlang load =10.0
***************************
第10000个，	已经阻塞的个数为：  246
第20000个，	已经阻塞的个数为：  1110
第30000个，	已经阻塞的个数为：  1171
IP层路由成功的请求总数为：2826
阻塞请求总数为：1171	没阻塞的：28829
阻塞率为：5.21284105482859%
**************************
 erlang load =15.0
***************************
第10000个，	已经阻塞的个数为：  1269
第20000个，	已经阻塞的个数为：  2422
第30000个，	已经阻塞的个数为：  2992
IP层路由成功的请求总数为：4729
阻塞请求总数为：2992	没阻塞的：27008
阻塞率为：13.944277424259704%




5/8/10  数目为10万，结果如下：  

 

**************************
 erlang load =1.0
***************************
IP层路由成功的请求总数为：3316
阻塞请求总数为：0	没阻塞的：100000
阻塞率为：0.0%

**************************
 erlang load =10.0
***************************
IP层路由成功的请求总数为：9704
阻塞请求总数为：2262	没阻塞的：97738
阻塞率为：3.2310055611829296%

**************************
 erlang load =15.0
***************************
IP层路由成功的请求总数为：16230
阻塞请求总数为：9503	没阻塞的：90497
阻塞率为：13.114477395658081%
   
   
